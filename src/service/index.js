import express from "express";
import bodyParser from "body-parser";
import dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";
import cors from "cors"; // CORS ÎØ∏Îì§Ïõ®Ïñ¥ Ï∂îÍ∞Ä
import { ticketDB, userDB, financeDB } from "../config/db.js"; // DB Ïó∞Í≤∞ Í∞ùÏ≤¥
import authRouter from "../routes/login/authRoute.js";
import ticketMainRoutes from "../routes/ticket/ticketMain.js";
import ticketDetailRoutes from "../routes/ticket/ticketDetail.js";
import createTicketRoutes from "../routes/ticket/createTicket.js";
import ticketAddRoutes from "../routes/ticket/ticketAdd.js";
import ticketAddNFCRoutes from "../routes/ticket/ticketAddNFC.js";
import ticketListRoutes from "../routes/ticket/ticketList.js";
import modifyTikcetRoutes from "../routes/ticket/modifyTicket.js";
import refundRequestRoutes from "../routes/refund/refundRequest.js";
import refundListRoutes from "../routes/refund/refundList.js";
import refundDetailRoutes from "../routes/refund/refundDetail.js";
import refundPermissionRoutes from "../routes/refund/refundPermission.js";
import paymentPostRoutes from "../routes/payment/paymentPost.js";
import paymentListRoutes from "../routes/payment/paymentList.js";
import paymentDetailRoutes from "../routes/payment/paymentDetail.js";
import paymentPermissionRoutes from "../routes/payment/paymentPermission.js";
import adminConnectionRoutes from "../routes/admin/adminConnection.js";
import refundDenyRoutes from "../routes/refund/refundDeny.js";
import paymentDenyRoutes from "../routes/payment/paymentDeny.js";
import ticketRefundDetailRoutes from "../routes/ticket/ticketRefundDetail.js";
import modifyTicketDetailRoutes from "../routes/ticket/modifyTicketDetail.js";
import ticketDeleteRoutes from "../routes/ticket/ticketDelete.js";
import fcmTokenRoutes from "../routes/FCM/fcmTokenAdd.js"; // ‚úÖ FCM ÌÜ†ÌÅ∞ Ï†ÄÏû• API Ï∂îÍ∞Ä
import cronJob from "../jobs/cronJob.js"; // ‚úÖ ÌÅ¨Î°† ÏûëÏóÖ Ïã§Ìñâ
import cookieParser from "cookie-parser"; // Ïø†ÌÇ§ ÌååÏÑú ÎØ∏Îì§Ïõ®Ïñ¥
import { swaggerUi, specs } from "../../swagger/swagger.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
//console.log("‚úÖ Swagger apis Í≤ΩÎ°ú:", path.join(__dirname, "../routes/**/*.js"));

// dotenv ÌôòÍ≤Ω Î≥ÄÏàò Î°úÎìú
dotenv.config();

// ‚úÖ ÏÑúÎ≤Ñ ÏÑ§Ï†ï
const app = express();
const port = 3000;

// ‚úÖ CORS ÏÑ§Ï†ï
app.use(cors()); // Î™®Îì† ÎèÑÎ©îÏù∏ÏóêÏÑúÏùò ÏöîÏ≤≠ ÌóàÏö©

// ‚úÖ ÎØ∏Îì§Ïõ®Ïñ¥ ÏÑ§Ï†ï
app.use(bodyParser.json());

app.use(
  "/eventUploads",
  express.static(
    path.join(__dirname, "..", "..", "uploads", "eventPlacePictures")
  )
);

app.use(
  "/paymentPictures",
  express.static(path.join(__dirname, "..", "..", "uploads", "paymentPictures"))
);

app.use(cookieParser()); // cookie-parser ÎØ∏Îì§Ïõ®Ïñ¥ ÏÇ¨Ïö©
// ‚úÖ Swagger ÎùºÏö∞Ìä∏ ÏÑ§Ï†ï
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(specs));

// ‚úÖ ÎùºÏö∞Ìä∏ Îì±Î°ù
app.use(authRouter);
app.use(ticketMainRoutes);
app.use(ticketDetailRoutes);
app.use(createTicketRoutes);
app.use(ticketAddRoutes);
app.use(ticketListRoutes);
app.use(modifyTikcetRoutes);
app.use(refundRequestRoutes);
app.use(refundListRoutes);
app.use(refundDetailRoutes);
app.use(refundPermissionRoutes);
app.use(paymentPostRoutes);
app.use(paymentListRoutes);
app.use(paymentDetailRoutes);
app.use(paymentPermissionRoutes);
app.use(adminConnectionRoutes);
app.use(ticketAddNFCRoutes);
app.use(refundDenyRoutes);
app.use(paymentDenyRoutes);
app.use(ticketRefundDetailRoutes);
app.use(modifyTicketDetailRoutes);
app.use(ticketDeleteRoutes);
app.use(fcmTokenRoutes);

cronJob(); // ‚úÖ ÌÅ¨Î°† ÏûëÏóÖ Ïã§Ìñâ

// ‚úÖ ÏÑúÎ≤Ñ ÏãúÏûë
app.listen(port, "0.0.0.0", () => {
  console.log(`üöÄ Server is running on http://localhost:${port}`);

  // DB Ïó∞Í≤∞ ÏãúÎèÑ
  connectToDatabases();
});

// ‚úÖ DB Ïó∞Í≤∞ Ìï®Ïàò
const connectToDatabases = () => {
  // ticketDB Ïó∞Í≤∞
  ticketDB.once("open", () => {
    console.log("‚úÖ Connected to ticketDB");
  });
  ticketDB.on("error", (err) => {
    console.error("‚ùå Error connecting to ticketDB:", err);
  });

  // userDB Ïó∞Í≤∞
  userDB.once("open", () => {
    console.log("‚úÖ Connected to userDB");
  });
  userDB.on("error", (err) => {
    console.error("‚ùå Error connecting to userDB:", err);
  });

  // financeDB Ïó∞Í≤∞
  financeDB.once("open", () => {
    console.log("‚úÖ Connected to financeDB");
  });
  financeDB.on("error", (err) => {
    console.error("‚ùå Error connecting to financeDB:", err);
  });
};
