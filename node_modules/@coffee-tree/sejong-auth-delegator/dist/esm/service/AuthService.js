import fetch from 'node-fetch';

class AuthService {
    constructor() {
        this.portalLoginUrl = "https://portal.sejong.ac.kr/jsp/login/login_action.jsp";
        this.ssoUrl = "http://classic.sejong.ac.kr/_custom/sejong/sso/sso-return.jsp?returnUrl=https://classic.sejong.ac.kr/classic/index.do";
        this.ssotoken = null;
    }

    async authenticate(loginRequestDto) {
        const formData = new URLSearchParams();
        formData.append("mainLogin", "N");
        formData.append("rtUrl", "library.sejong.ac.kr");
        formData.append("id", loginRequestDto.userId);
        formData.append("password", loginRequestDto.password);

        try {
            const loginResponse = await fetch(this.portalLoginUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded",
                    "Referer": "https://portal.sejong.ac.kr/",
                    "Origin": "https://portal.sejong.ac.kr",
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
                },
                body: formData.toString(),
                redirect: "manual",
                credentials: "include",
            });

            const setCookieHeader = loginResponse.headers.get("set-cookie");
            this.ssotoken = this.extractSsotoken(setCookieHeader);

            if (!this.ssotoken) {
                throw new Error("Failed: Login (No SSO token)");
            }

            // SSO 요청
            await fetch(this.ssoUrl, {
                method: "GET",
                headers: {
                    "Cookie": `ssotoken=${this.ssotoken};`,
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
                },
                credentials: "include",
            });
            
            return this.ssotoken; // 인증이 성공하면 ssotoken을 반환

        } catch (error) {
            console.error(error);
            throw new Error("Failed: Authentication process failed");
        }
    }

    extractSsotoken(cookieHeader) {
        if (!cookieHeader) return null;
        const match = cookieHeader.match(/ssotoken=([^;]+)/);
        return match ? match[1] : null;
    }
}

export default AuthService;
